/*
* generated by Xtext
*/
package fr.istic.idm.project.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class UIDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PollSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PollSystem");
		private final Assignment cPollsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPollsPollParserRuleCall_0 = (RuleCall)cPollsAssignment.eContents().get(0);
		
		//PollSystem:
		//	polls+=Poll*;
		public ParserRule getRule() { return rule; }

		//polls+=Poll*
		public Assignment getPollsAssignment() { return cPollsAssignment; }

		//Poll
		public RuleCall getPollsPollParserRuleCall_0() { return cPollsPollParserRuleCall_0; }
	}

	public class PollElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Poll");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPollKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQuestionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuestionsQuestionParserRuleCall_3_0 = (RuleCall)cQuestionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Poll:
		//	"Poll" name=ID? "{" questions+=Question+ "}";
		public ParserRule getRule() { return rule; }

		//"Poll" name=ID? "{" questions+=Question+ "}"
		public Group getGroup() { return cGroup; }

		//"Poll"
		public Keyword getPollKeyword_0() { return cPollKeyword_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//questions+=Question+
		public Assignment getQuestionsAssignment_3() { return cQuestionsAssignment_3; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_3_0() { return cQuestionsQuestionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOptionsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOptionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOptionsOptionParserRuleCall_4_0 = (RuleCall)cOptionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Question:
		//	"Question" id=ID? "{" "options" options+=Option+ "}";
		public ParserRule getRule() { return rule; }

		//"Question" id=ID? "{" "options" options+=Option+ "}"
		public Group getGroup() { return cGroup; }

		//"Question"
		public Keyword getQuestionKeyword_0() { return cQuestionKeyword_0; }

		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"options"
		public Keyword getOptionsKeyword_3() { return cOptionsKeyword_3; }

		//options+=Option+
		public Assignment getOptionsAssignment_4() { return cOptionsAssignment_4; }

		//Option
		public RuleCall getOptionsOptionParserRuleCall_4_0() { return cOptionsOptionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Option:
		//	(id=ID "->")? type=Type;
		public ParserRule getRule() { return rule; }

		//(id=ID "->")? type=Type
		public Group getGroup() { return cGroup; }

		//(id=ID "->")?
		public Group getGroup_0() { return cGroup_0; }

		//id=ID
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0_0() { return cIdIDTerminalRuleCall_0_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1() { return cHyphenMinusGreaterThanSignKeyword_0_1; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCheckBoxParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRadioButtonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComboBoxParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTextBoxParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cImageParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Type:
		//	CheckBox | RadioButton | ComboBox | TextBox | Image;
		public ParserRule getRule() { return rule; }

		//CheckBox | RadioButton | ComboBox | TextBox | Image
		public Alternatives getAlternatives() { return cAlternatives; }

		//CheckBox
		public RuleCall getCheckBoxParserRuleCall_0() { return cCheckBoxParserRuleCall_0; }

		//RadioButton
		public RuleCall getRadioButtonParserRuleCall_1() { return cRadioButtonParserRuleCall_1; }

		//ComboBox
		public RuleCall getComboBoxParserRuleCall_2() { return cComboBoxParserRuleCall_2; }

		//TextBox
		public RuleCall getTextBoxParserRuleCall_3() { return cTextBoxParserRuleCall_3; }

		//Image
		public RuleCall getImageParserRuleCall_4() { return cImageParserRuleCall_4; }
	}

	public class CheckBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCheckBoxAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCheckBoxCheckboxKeyword_0_0 = (Keyword)cCheckBoxAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefaultAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefaultIDTerminalRuleCall_2_0 = (RuleCall)cDefaultAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CheckBox:
		//	checkBox="Checkbox" "{" default=ID? "}";
		public ParserRule getRule() { return rule; }

		//checkBox="Checkbox" "{" default=ID? "}"
		public Group getGroup() { return cGroup; }

		//checkBox="Checkbox"
		public Assignment getCheckBoxAssignment_0() { return cCheckBoxAssignment_0; }

		//"Checkbox"
		public Keyword getCheckBoxCheckboxKeyword_0_0() { return cCheckBoxCheckboxKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//default=ID?
		public Assignment getDefaultAssignment_2() { return cDefaultAssignment_2; }

		//ID
		public RuleCall getDefaultIDTerminalRuleCall_2_0() { return cDefaultIDTerminalRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class RadioButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RadioButton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRadioButtonAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRadioButtonRadioButtonKeyword_0_0 = (Keyword)cRadioButtonAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefaultAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefaultIDTerminalRuleCall_2_0 = (RuleCall)cDefaultAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RadioButton:
		//	radioButton="RadioButton" "{" default=ID? "}";
		public ParserRule getRule() { return rule; }

		//radioButton="RadioButton" "{" default=ID? "}"
		public Group getGroup() { return cGroup; }

		//radioButton="RadioButton"
		public Assignment getRadioButtonAssignment_0() { return cRadioButtonAssignment_0; }

		//"RadioButton"
		public Keyword getRadioButtonRadioButtonKeyword_0_0() { return cRadioButtonRadioButtonKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//default=ID?
		public Assignment getDefaultAssignment_2() { return cDefaultAssignment_2; }

		//ID
		public RuleCall getDefaultIDTerminalRuleCall_2_0() { return cDefaultIDTerminalRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ComboBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComboBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComboBoxAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cComboBoxComboBoxItemKeyword_0_0 = (Keyword)cComboBoxAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefaultAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefaultIDTerminalRuleCall_2_0 = (RuleCall)cDefaultAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ComboBox:
		//	comboBox="ComboBoxItem" "{" default=ID? "}";
		public ParserRule getRule() { return rule; }

		//comboBox="ComboBoxItem" "{" default=ID? "}"
		public Group getGroup() { return cGroup; }

		//comboBox="ComboBoxItem"
		public Assignment getComboBoxAssignment_0() { return cComboBoxAssignment_0; }

		//"ComboBoxItem"
		public Keyword getComboBoxComboBoxItemKeyword_0_0() { return cComboBoxComboBoxItemKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//default=ID?
		public Assignment getDefaultAssignment_2() { return cDefaultAssignment_2; }

		//ID
		public RuleCall getDefaultIDTerminalRuleCall_2_0() { return cDefaultIDTerminalRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class TextBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTextBoxAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTextBoxTextBoxKeyword_0_0 = (Keyword)cTextBoxAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefaultAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefaultIDTerminalRuleCall_2_0 = (RuleCall)cDefaultAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TextBox:
		//	textBox="TextBox" "{" default=ID? "}";
		public ParserRule getRule() { return rule; }

		//textBox="TextBox" "{" default=ID? "}"
		public Group getGroup() { return cGroup; }

		//textBox="TextBox"
		public Assignment getTextBoxAssignment_0() { return cTextBoxAssignment_0; }

		//"TextBox"
		public Keyword getTextBoxTextBoxKeyword_0_0() { return cTextBoxTextBoxKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//default=ID?
		public Assignment getDefaultAssignment_2() { return cDefaultAssignment_2; }

		//ID
		public RuleCall getDefaultIDTerminalRuleCall_2_0() { return cDefaultIDTerminalRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Image");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefaultAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefaultIDTerminalRuleCall_2_0 = (RuleCall)cDefaultAssignment_2.eContents().get(0);
		private final Assignment cUrlAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUrlSTRINGTerminalRuleCall_3_0 = (RuleCall)cUrlAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Image:
		//	"Image" "{" default=ID? url=STRING "}";
		public ParserRule getRule() { return rule; }

		//"Image" "{" default=ID? url=STRING "}"
		public Group getGroup() { return cGroup; }

		//"Image"
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//default=ID?
		public Assignment getDefaultAssignment_2() { return cDefaultAssignment_2; }

		//ID
		public RuleCall getDefaultIDTerminalRuleCall_2_0() { return cDefaultIDTerminalRuleCall_2_0; }

		//url=STRING
		public Assignment getUrlAssignment_3() { return cUrlAssignment_3; }

		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_3_0() { return cUrlSTRINGTerminalRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	private final PollSystemElements pPollSystem;
	private final PollElements pPoll;
	private final QuestionElements pQuestion;
	private final OptionElements pOption;
	private final TypeElements pType;
	private final CheckBoxElements pCheckBox;
	private final RadioButtonElements pRadioButton;
	private final ComboBoxElements pComboBox;
	private final TextBoxElements pTextBox;
	private final ImageElements pImage;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UIDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPollSystem = new PollSystemElements();
		this.pPoll = new PollElements();
		this.pQuestion = new QuestionElements();
		this.pOption = new OptionElements();
		this.pType = new TypeElements();
		this.pCheckBox = new CheckBoxElements();
		this.pRadioButton = new RadioButtonElements();
		this.pComboBox = new ComboBoxElements();
		this.pTextBox = new TextBoxElements();
		this.pImage = new ImageElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.istic.idm.project.UIDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PollSystem:
	//	polls+=Poll*;
	public PollSystemElements getPollSystemAccess() {
		return pPollSystem;
	}
	
	public ParserRule getPollSystemRule() {
		return getPollSystemAccess().getRule();
	}

	//Poll:
	//	"Poll" name=ID? "{" questions+=Question+ "}";
	public PollElements getPollAccess() {
		return pPoll;
	}
	
	public ParserRule getPollRule() {
		return getPollAccess().getRule();
	}

	//Question:
	//	"Question" id=ID? "{" "options" options+=Option+ "}";
	public QuestionElements getQuestionAccess() {
		return pQuestion;
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//Option:
	//	(id=ID "->")? type=Type;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}

	//Type:
	//	CheckBox | RadioButton | ComboBox | TextBox | Image;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//CheckBox:
	//	checkBox="Checkbox" "{" default=ID? "}";
	public CheckBoxElements getCheckBoxAccess() {
		return pCheckBox;
	}
	
	public ParserRule getCheckBoxRule() {
		return getCheckBoxAccess().getRule();
	}

	//RadioButton:
	//	radioButton="RadioButton" "{" default=ID? "}";
	public RadioButtonElements getRadioButtonAccess() {
		return pRadioButton;
	}
	
	public ParserRule getRadioButtonRule() {
		return getRadioButtonAccess().getRule();
	}

	//ComboBox:
	//	comboBox="ComboBoxItem" "{" default=ID? "}";
	public ComboBoxElements getComboBoxAccess() {
		return pComboBox;
	}
	
	public ParserRule getComboBoxRule() {
		return getComboBoxAccess().getRule();
	}

	//TextBox:
	//	textBox="TextBox" "{" default=ID? "}";
	public TextBoxElements getTextBoxAccess() {
		return pTextBox;
	}
	
	public ParserRule getTextBoxRule() {
		return getTextBoxAccess().getRule();
	}

	//Image:
	//	"Image" "{" default=ID? url=STRING "}";
	public ImageElements getImageAccess() {
		return pImage;
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
