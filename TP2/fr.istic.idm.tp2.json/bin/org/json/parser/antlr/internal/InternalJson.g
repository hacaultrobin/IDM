/*
* generated by Xtext
*/
grammar InternalJson;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.json.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.json.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.json.services.JsonGrammarAccess;

}

@parser::members {

 	private JsonGrammarAccess grammarAccess;
 	
    public InternalJsonParser(TokenStream input, JsonGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "JsonPollSystem";	
   	}
   	
   	@Override
   	protected JsonGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleJsonPollSystem
entryRuleJsonPollSystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJsonPollSystemRule()); }
	 iv_ruleJsonPollSystem=ruleJsonPollSystem 
	 { $current=$iv_ruleJsonPollSystem.current; } 
	 EOF 
;

// Rule JsonPollSystem
ruleJsonPollSystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJsonPollSystemAccess().getLeftCurlyBracketKeyword_0());
    }
	otherlv_1='polls' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJsonPollSystemAccess().getPollsKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJsonPollSystemAccess().getColonKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getJsonPollSystemAccess().getArrayJsonPollParserRuleCall_3()); 
    }
    this_ArrayJsonPoll_3=ruleArrayJsonPoll
    { 
        $current = $this_ArrayJsonPoll_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getJsonPollSystemAccess().getRightCurlyBracketKeyword_4());
    }
)?
;





// Entry rule entryRuleArrayJsonPoll
entryRuleArrayJsonPoll returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayJsonPollRule()); }
	 iv_ruleArrayJsonPoll=ruleArrayJsonPoll 
	 { $current=$iv_ruleArrayJsonPoll.current; } 
	 EOF 
;

// Rule ArrayJsonPoll
ruleArrayJsonPoll returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayJsonPollAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayJsonPollAccess().getPollsJsonPollParserRuleCall_1_0()); 
	    }
		lv_polls_1_0=ruleJsonPoll		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayJsonPollRule());
	        }
       		add(
       			$current, 
       			"polls",
        		lv_polls_1_0, 
        		"JsonPoll");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayJsonPollAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayJsonPollAccess().getPollsJsonPollParserRuleCall_2_1_0()); 
	    }
		lv_polls_3_0=ruleJsonPoll		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayJsonPollRule());
	        }
       		add(
       			$current, 
       			"polls",
        		lv_polls_3_0, 
        		"JsonPoll");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayJsonPollAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleJsonPoll
entryRuleJsonPoll returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJsonPollRule()); }
	 iv_ruleJsonPoll=ruleJsonPoll 
	 { $current=$iv_ruleJsonPoll.current; } 
	 EOF 
;

// Rule JsonPoll
ruleJsonPoll returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJsonPollAccess().getLeftCurlyBracketKeyword_0());
    }
(	otherlv_1='name' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJsonPollAccess().getNameKeyword_1_0());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJsonPollAccess().getColonKeyword_1_1());
    }
(
(
		lv_name_3_0=RULE_STRING
		{
			newLeafNode(lv_name_3_0, grammarAccess.getJsonPollAccess().getNameSTRINGTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJsonPollRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"STRING");
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getJsonPollAccess().getCommaKeyword_1_3());
    }
)?	otherlv_5='questions' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getJsonPollAccess().getQuestionsKeyword_2());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getJsonPollAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJsonPollAccess().getQuestionsArrayJsonQuestionParserRuleCall_4_0()); 
	    }
		lv_questions_7_0=ruleArrayJsonQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJsonPollRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_7_0, 
        		"ArrayJsonQuestion");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getJsonPollAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleArrayJsonQuestion
entryRuleArrayJsonQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayJsonQuestionRule()); }
	 iv_ruleArrayJsonQuestion=ruleArrayJsonQuestion 
	 { $current=$iv_ruleArrayJsonQuestion.current; } 
	 EOF 
;

// Rule ArrayJsonQuestion
ruleArrayJsonQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayJsonQuestionAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayJsonQuestionAccess().getQuestionJsonQuestionParserRuleCall_1_0()); 
	    }
		lv_question_1_0=ruleJsonQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayJsonQuestionRule());
	        }
       		add(
       			$current, 
       			"question",
        		lv_question_1_0, 
        		"JsonQuestion");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayJsonQuestionAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayJsonQuestionAccess().getQuestionJsonQuestionParserRuleCall_2_1_0()); 
	    }
		lv_question_3_0=ruleJsonQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayJsonQuestionRule());
	        }
       		add(
       			$current, 
       			"question",
        		lv_question_3_0, 
        		"JsonQuestion");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayJsonQuestionAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleJsonQuestion
entryRuleJsonQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJsonQuestionRule()); }
	 iv_ruleJsonQuestion=ruleJsonQuestion 
	 { $current=$iv_ruleJsonQuestion.current; } 
	 EOF 
;

// Rule JsonQuestion
ruleJsonQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJsonQuestionAccess().getLeftCurlyBracketKeyword_0());
    }
	otherlv_1='question' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJsonQuestionAccess().getQuestionKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJsonQuestionAccess().getColonKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getJsonQuestionAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='name' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getJsonQuestionAccess().getNameKeyword_4_0());
    }
	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getJsonQuestionAccess().getColonKeyword_4_1());
    }
(
(
		lv_name_6_0=RULE_STRING
		{
			newLeafNode(lv_name_6_0, grammarAccess.getJsonQuestionAccess().getNameSTRINGTerminalRuleCall_4_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJsonQuestionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"STRING");
	    }

)
)	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getJsonQuestionAccess().getCommaKeyword_4_3());
    }
)?	otherlv_8='text' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getJsonQuestionAccess().getTextKeyword_5());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getJsonQuestionAccess().getColonKeyword_6());
    }
(
(
		lv_text_10_0=RULE_STRING
		{
			newLeafNode(lv_text_10_0, grammarAccess.getJsonQuestionAccess().getTextSTRINGTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJsonQuestionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_10_0, 
        		"STRING");
	    }

)
)	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getJsonQuestionAccess().getCommaKeyword_8());
    }
	otherlv_12='options' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getJsonQuestionAccess().getOptionsKeyword_9());
    }
	otherlv_13=':' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getJsonQuestionAccess().getColonKeyword_10());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJsonQuestionAccess().getOptionsArrayJsonOptionParserRuleCall_11_0()); 
	    }
		lv_options_14_0=ruleArrayJsonOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJsonQuestionRule());
	        }
       		add(
       			$current, 
       			"options",
        		lv_options_14_0, 
        		"ArrayJsonOption");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getJsonQuestionAccess().getRightCurlyBracketKeyword_12());
    }
	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getJsonQuestionAccess().getRightCurlyBracketKeyword_13());
    }
)
;





// Entry rule entryRuleArrayJsonOption
entryRuleArrayJsonOption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayJsonOptionRule()); }
	 iv_ruleArrayJsonOption=ruleArrayJsonOption 
	 { $current=$iv_ruleArrayJsonOption.current; } 
	 EOF 
;

// Rule ArrayJsonOption
ruleArrayJsonOption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayJsonOptionAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayJsonOptionAccess().getOptionJsonOptionParserRuleCall_1_0()); 
	    }
		lv_option_1_0=ruleJsonOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayJsonOptionRule());
	        }
       		add(
       			$current, 
       			"option",
        		lv_option_1_0, 
        		"JsonOption");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayJsonOptionAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayJsonOptionAccess().getOptionJsonOptionParserRuleCall_2_1_0()); 
	    }
		lv_option_3_0=ruleJsonOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayJsonOptionRule());
	        }
       		add(
       			$current, 
       			"option",
        		lv_option_3_0, 
        		"JsonOption");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayJsonOptionAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleJsonOption
entryRuleJsonOption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJsonOptionRule()); }
	 iv_ruleJsonOption=ruleJsonOption 
	 { $current=$iv_ruleJsonOption.current; } 
	 EOF 
;

// Rule JsonOption
ruleJsonOption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJsonOptionAccess().getLeftCurlyBracketKeyword_0());
    }
(	otherlv_1='id' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJsonOptionAccess().getIdKeyword_1_0());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJsonOptionAccess().getColonKeyword_1_1());
    }
(
(
		lv_id_3_0=RULE_STRING
		{
			newLeafNode(lv_id_3_0, grammarAccess.getJsonOptionAccess().getIdSTRINGTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJsonOptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_3_0, 
        		"STRING");
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getJsonOptionAccess().getCommaKeyword_1_3());
    }
)?	otherlv_5='test' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getJsonOptionAccess().getTestKeyword_2());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getJsonOptionAccess().getColonKeyword_3());
    }
(
(
		lv_text_7_0=RULE_STRING
		{
			newLeafNode(lv_text_7_0, grammarAccess.getJsonOptionAccess().getTextSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJsonOptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_7_0, 
        		"STRING");
	    }

)
)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getJsonOptionAccess().getRightCurlyBracketKeyword_5());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


